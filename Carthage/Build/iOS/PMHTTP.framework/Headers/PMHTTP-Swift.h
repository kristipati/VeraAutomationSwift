// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class HTTPManagerEnvironment;
@class NSURLSessionConfiguration;
@class NSURLCredential;
@class HTTPManagerRetryBehavior;
@class HTTPMockManager;

/**
  Manages access to a REST API.
  This class is thread-safe. Requests may be created and used from any thread.
  \code
  HTTPManagerRequest
  \endcodes support concurrent reading from multiple threads, but it is not safe to mutate
  a request while concurrently accessing it from another thread. \code
  HTTPManagerTask
  \endcodes are safe to access
  from any thread.
*/
SWIFT_CLASS("_TtC6PMHTTP11HTTPManager")
@interface HTTPManager : NSObject
/**
  A block that is invoked whenever the number of outstanding \code
  HTTPManagerTask
  \endcodes changes.
  If the value of this property changes while there are outstanding tasks, the old
  value is not invoked, but the new value will be invoked asynchronously with the current
  number of tasks. If there are no outstanding tasks the new value will not be invoked.
  note:
  This block is always invoked on the main thread.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nullable networkActivityHandler)(NSInteger);)
+ (void (^ _Nullable)(NSInteger))networkActivityHandler;
+ (void)setNetworkActivityHandler:(void (^ _Nullable)(NSInteger))newValue;
/**
  The current environment. The default value is \code
  nil
  \endcode.
  Changes to this property affects any newly-created requests but do not
  affect any existing requests or any tasks that are in-progress.
  Changing this property also resets the default credential if the
  new value differs from the old one. Setting this property to the existing
  value has no effect.
  important:
  If \code
  environment
  \endcode is \code
  nil
  \endcode, requests created with relative paths will fail,
  but requests created with absolute URLs will continue to work. See \code
  HTTPManagerConfigurable
  \endcode
  for how to configure the shared \code
  HTTPManager
  \endcode prior to first use.
  seealso:
  \code
  resetSession()
  \endcode, \code
  HTTPManagerConfigurable
  \endcode, \code
  defaultCredential
  \endcode.
*/
@property (nonatomic, strong) HTTPManagerEnvironment * _Nullable environment;
/**
  The URL session configuration.
  Changing mutable values within the configuration object has no effect on the
  HTTP manager, but you can reassign this property with the modified
  configuration object.
  Changing this property affects all newly-created tasks but does not cancel
  any tasks that are in-flight. You can use \code
  resetSession()
  \endcode if you need to
  cancel any in-flight tasks.
  seealso:
  \code
  resetSession()
  \endcode
*/
@property (nonatomic, strong) NSURLSessionConfiguration * _Nonnull sessionConfiguration;
/**
  The credential to use for HTTP requests. The default value is \code
  nil
  \endcode.
  Individual requests may override this credential with their own credential.
  Changes to this property affect any newly-created requests but do not affect any existing
  requests or any tasks that are in-progress.
  note:
  This credential is only used for HTTP requests that are located within the current
  environment’s base URL. If a request is created with an absolute path or absolute URL, and
  the resulting URL does not represent a resource found within the environment’s base URL,
  the request will not be assigned the default credential.
  important:
  Only password-based credentials are supported. It is an error to assign any
  other type of credential.
  seealso:
  \code
  environment
  \endcode.
*/
@property (nonatomic, strong) NSURLCredential * _Nullable defaultCredential;
/**
  The default retry behavior to use for requests. The default value is \code
  nil
  \endcode.
  Individual requests may override this behavior with their own behavior.
  Changes to this property affect any newly-created requests but do not affect
  any existing requests or any tasks that are in-progress.
*/
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable defaultRetryBehavior;
/**
  Whether errors should be assumed to be JSON. The default value is \code
  false
  \endcode.
  If \code
  true
  \endcode, all error bodies are parsed as JSON regardless of their declared
  Content-Type. This setting is intended to work around bad servers that
  don’t declare their Content-Types properly.
*/
@property (nonatomic) BOOL defaultAssumeErrorsAreJSON;
/**
  The user agent that’s passed to every request.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull userAgent;
/**
  An \code
  HTTPMockManager
  \endcode that can be used to define mocks for this \code
  HTTPManager
  \endcode.
*/
@property (nonatomic, readonly, strong) HTTPMockManager * _Nonnull mockManager;
/**
  Invalidates all in-flight network operations and resets the URL session.
  note:
  Any tasks that have finished their network portion and are processing
  the results are not canceled.
*/
- (void)resetSession;
/**
  Creates and returns a new \code
  HTTPManager
  \endcode.
  The returned \code
  HTTPManager
  \endcode needs its \code
  environment
  \endcode set, but is otherwise ready
  for use.
  important:
  Unlike the global \code
  HTTP
  \endcode property, calling this initializer does
  not go through \code
  HTTPManagerConfigurable
  \endcode. The calling code must configure
  the returned \code
  HTTPManager
  \endcode instance as appropriate.
  seealso:
  \code
  HTTP
  \endcode.
*/
- (nonnull instancetype)init;
@end


@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
@end


@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
@end


@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
@end

@class HTTPManagerDataRequest;
@class HTTPManagerActionRequest;
@class HTTPManagerUploadFormRequest;
@class HTTPManagerUploadJSONRequest;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/**
  The default \code
  HTTPManager
  \endcode instance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HTTPManager * _Nonnull defaultManager;)
+ (HTTPManager * _Nonnull)defaultManager;
/**
  Creates a GET request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.


  returns:
  An \code
  HTTPManagerDataRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode  cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path;
/**
  Creates a DELETE request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.


  returns:
  An \code
  HTTPManagerActionRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path;
/**
  Creates a POST request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path;
/**
  Creates a POST request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param json The JSON-compatible object to upload as the body of the request.


  returns:
  An \code
  HTTPManagerUploadJSONRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot
  be parsed by \code
  NSURL
  \endcode or \code
  json
  \endcode is not a JSON-compatible object.
*/
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path json:(id _Nonnull)object;
/**
  Creates a PUT request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path;
/**
  Creates a PUT request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param json The JSON-compatible object to upload as the body of the request.


  returns:
  An \code
  HTTPManagerUploadJSONRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot
  be parsed by \code
  NSURL
  \endcode or \code
  json
  \endcode is not a JSON-compatible object.
*/
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path json:(id _Nonnull)object;
/**
  Creates a PATCH request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path;
/**
  Creates a PATCH request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param json The JSON-compatible object to upload as the body of the request.


  returns:
  An \code
  HTTPManagerUploadJSONRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot
  be parsed by \code
  NSURL
  \endcode or \code
  json
  \endcode is not a JSON-compatible object.
*/
- (HTTPManagerUploadJSONRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path json:(id _Nonnull)object;
@end

@class NSURLResponse;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/**
  Parses the \code
  Date
  \endcode header from a URL response and returns it.
  \param response A \code
  URLResponse
  \endcode that the header is pulled from. If this
  is not an \code
  HTTPURLResponse
  \endcode, \code
  nil
  \endcode is returned.


  returns:
  An \code
  NSDate
  \endcode, or \code
  nil
  \endcode if the header doesn’t exist or has an invalid format.
*/
+ (NSDate * _Nullable)parsedDateHeaderFromResponse:(NSURLResponse * _Nonnull)response;
/**
  Parses a header value that is formatted like the “Date” HTTP header.
  This parses the specific format allowed for the “Date” header, and any
  other header that uses the \code
  HTTP-date
  \endcode production.
  See <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">section 3.3.1 of RFC 2616</a> for details.
  \param dateString The string value of the HTTP header.


  returns:
  An \code
  NSDate
  \endcode, or \code
  nil
  \endcode if \code
  dateString
  \endcode contains an invalid format.
*/
+ (NSDate * _Nullable)parsedDateHeaderFromString:(NSString * _Nonnull)dateString;
@end

@class HTTPManagerUploadDataRequest;

@interface HTTPManager (SWIFT_EXTENSION(PMHTTP))
/**
  Creates a GET request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the query
  string. Default is \code
  [:]
  \endcode.


  returns:
  An \code
  HTTPManagerDataRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode  cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/**
  Creates a GET request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the query
  string.


  returns:
  An \code
  HTTPManagerDataRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode  cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerDataRequest * _Null_unspecified)requestForGET:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters;
/**
  Creates a DELETE request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the query
  string. Default is \code
  [:]
  \endcode.


  returns:
  An \code
  HTTPManagerActionRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/**
  Creates a DELETE request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the query
  string.


  returns:
  An \code
  HTTPManagerActionRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerActionRequest * _Null_unspecified)requestForDELETE:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters;
/**
  Creates a POST request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the body as
  \code
  application/x-www-form-urlencoded
  \endcode. Default is \code
  [:]
  \endcode.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/**
  Creates a POST request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the body as
  \code
  application/x-www-form-urlencoded
  \endcode.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters;
/**
  Creates a POST request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param contentType The MIME type of the data. Defaults to \code
  "application/octet-stream"
  \endcode.

  \param data The data to upload as the body of the request.


  returns:
  An \code
  HTTPManagerUploadDataRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot
  be parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPOST:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data;
/**
  Creates a PUT request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the body as
  \code
  application/x-www-form-urlencoded
  \endcode. Default is \code
  [:]
  \endcode.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/**
  Creates a PUT request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the body as
  \code
  application/x-www-form-urlencoded
  \endcode.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters;
/**
  Creates a PUT request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param contentType The MIME type of the data. Defaults to \code
  "application/octet-stream"
  \endcode.

  \param data The data to upload as the body of the request.


  returns:
  An \code
  HTTPManagerUploadDataRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot
  be parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPUT:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data;
/**
  Creates a PATCH request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the body as
  \code
  application/x-www-form-urlencoded
  \endcode. Default is \code
  [:]
  \endcode.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters;
/**
  Creates a PATCH request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param parameters The request parameters, passed in the body as
  \code
  application/x-www-form-urlencoded
  \endcode.


  returns:
  An \code
  HTTPManagerUploadFormRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot be
  parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadFormRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)parameters;
/**
  Creates a PATCH request.
  \param path The path for the request, interpreted relative to the
  environment. May be an absolute URL.

  \param contentType The MIME type of the data. Defaults to \code
  "application/octet-stream"
  \endcode.

  \param data The data to upload as the body of the request.


  returns:
  An \code
  HTTPManagerUploadDataRequest
  \endcode, or \code
  nil
  \endcode if the \code
  path
  \endcode cannot
  be parsed by \code
  NSURL
  \endcode.
*/
- (HTTPManagerUploadDataRequest * _Null_unspecified)requestForPATCH:(NSString * _Nonnull)path contentType:(NSString * _Nonnull)contentType data:(NSData * _Nonnull)data;
@end


/**
  An HTTP request.
  <em>Thread safety:</em>
  This class can be safely read from concurrent threads, but any modifications require exclusive access.
*/
SWIFT_CLASS("_TtC6PMHTTP18HTTPManagerRequest")
@interface HTTPManagerRequest : NSObject <NSCopying>
/**
  The URL for the request, including any query items as appropriate.
*/
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/**
  The Content-Type for the request.
  If no data is being submitted in the request body, the \code
  contentType
  \endcode
  will be empty.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/**
  The request parameters, or \code
  []
  \endcode if there are no parameters.
  The parameters are passed by default in the URL query string.
  Subclasses may override this behavior.
*/
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/**
  The credential to use for the request. Default is the value of
  \code
  HTTPManager.defaultCredential
  \endcode.
  note:
  Only password-based credentials are supported. It is an error to assign
  any other type of credential.
*/
@property (nonatomic, strong) NSURLCredential * _Nullable credential;
/**
  The default cache storage policy to use for the response if the response does not
  include appropriate caching headers. If the response does include appropriate headers
  such as \code
  Cache-Control
  \endcode or \code
  Expires
  \endcode, this property is ignored.
  This property only establishes an upper bound on the cache storage allowed. If the
  URL session proposes to store the cached response in-memory only and the default policy
  is set to \code
  .Allowed
  \endcode, the response will still be stored in-memory only, and if the URL
  session proposes to not cache the response at all, the response will not be cached.
  The default value is \code
  .Allowed
  \endcode for most requests, and \code
  .NotAllowed
  \endcode for parse requests
  created from \code
  parseAsJSON()
  \endcode or \code
  parseAsJSON(with:)
  \endcode.
*/
@property (nonatomic) NSURLCacheStoragePolicy defaultResponseCacheStoragePolicy;
/**
  \code
  true
  \endcode iff redirects should be followed when processing the response.
  If \code
  false
  \endcode, network requests return a successful result containing the redirection
  response, and parse requests return an error with \code
  HTTPManagerError.UnexpectedRedirect()
  \endcode.
  Default is \code
  true
  \endcode.
*/
@property (nonatomic) BOOL shouldFollowRedirects;
/**
  Indicates whether the request is allowed to use the cellular radio. Default is \code
  true
  \endcode.
  If the session configuration’s \code
  allowsCellularAccess
  \endcode is \code
  false
  \endcode, access to the cellular
  radio is always denied regardless of the request’s \code
  allowsCellularAccess
  \endcode property.
*/
@property (nonatomic) BOOL allowsCellularAccess;
/**
  Whether the request represents an action the user is waiting on.
  Set this to \code
  true
  \endcode to increase the priority. Default is \code
  false
  \endcode.
*/
@property (nonatomic) BOOL userInitiated;
/**
  The retry behavior to use for the request. Default is the value of
  \code
  HTTPManager.defaultRetryBehavior
  \endcode.
*/
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
/**
  Whether errors should be assumed to be JSON.
  If \code
  true
  \endcode, all error bodies are parsed as JSON regardless of their declared
  Content-Type. This setting is intended to work around bad servers that
  don’t declare their Content-Types properly.
  The default value is provided by \code
  HTTPManager.defaultAssumeErrorsAreJSON
  \endcode.
*/
@property (nonatomic) BOOL assumeErrorsAreJSON;
/**
  Whether tasks created from this request should affect the visiblity of the
  network activity indicator. Default is \code
  true
  \endcode.
  Strictly speaking, this controls whether the task is visible to the network activity
  handler (if any), and it’s the handler’s job to show the activity indicator.
*/
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_;
@property (nonatomic, readonly, strong) HTTPManager * _Nonnull apiManager;
@property (nonatomic, readonly, copy) NSURL * _Nonnull baseURL;
/**
  Implementation detail of \code
  copyWithZone(_:)
  \endcode.
  \param request Guaranteed to be the same type as \code
  self
  \endcode.

*/
- (nonnull instancetype)initWith__copyOfRequest:(HTTPManagerRequest * _Nonnull)request OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSURLRequest * _Nonnull _preparedURLRequest;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  An HTTP request that does not yet have a parse handler.
*/
SWIFT_CLASS("_TtC6PMHTTP25HTTPManagerNetworkRequest")
@interface HTTPManagerNetworkRequest : HTTPManagerRequest
/**
  The request parameters, or \code
  []
  \endcode if there are no parameters.
  The parameters are passed by default in the URL query string.
  Subclasses may override this behavior.
*/
@property (nonatomic, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
/**
  Creates and returns an \code
  NSURLRequest
  \endcode object from the properties of \code
  self
  \endcode.
  For upload requests, the request will include the \code
  HTTPBody
  \endcode or \code
  HTTPBodyStream
  \endcode
  as appropriate.
*/
@property (nonatomic, readonly, copy) NSURLRequest * _Nonnull preparedURLRequest;
- (nonnull instancetype)initWith__copyOfRequest:(HTTPManagerRequest * _Nonnull)request OBJC_DESIGNATED_INITIALIZER;
@end


/**
  An HTTP POST/PUT/PATCH/DELETE request that does not yet have a parse handler.
  Similar to an \code
  HTTPManagerDataRequest
  \endcode except that it handles 204 No Content
  instead of throwing \code
  HTTPManagerError.UnexpectedNoContent
  \endcode.
*/
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerActionRequest")
@interface HTTPManagerActionRequest : HTTPManagerNetworkRequest
- (nonnull instancetype)initWith__copyOfRequest:(HTTPManagerRequest * _Nonnull)request OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
@end

@class HTTPManagerObjectParseRequest;
@class NSError;

@interface HTTPManagerActionRequest (SWIFT_EXTENSION(PMHTTP))
/**
  Returns a new request that parses the data as JSON.
  Any nulls in the JSON are represented as \code
  NSNull
  \endcode.
  note:
  The parse result is \code
  nil
  \endcode if and only if the server responded with
  204 No Content.
  note:
  If the response is a 204 No Content, the result object
  will return \code
  nil
  \endcode for \code
  value
  \endcode.

  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON;
/**
  Returns a new request that parses the data as JSON.
  note:
  The parse result is \code
  nil
  \endcode if and only if the server responded with
  204 No Content.
  note:
  If the response is a 204 No Content, the result object
  will return \code
  nil
  \endcode for \code
  value
  \endcode.
  \param omitNulls If \code
  true
  \endcode, nulls in the JSON are omitted from the result.
  If \code
  false
  \endcode, nulls are represented as \code
  NSNull
  \endcode. If the top-level value is null,
  it is always represented as \code
  NSNull
  \endcode regardless of this parameter.


  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls;
/**
  Returns a new request that parses the data as JSON and passes it through
  the specified handler. Any nulls in the JSON are represented as \code
  NSNull
  \endcode.
  note:
  If the \code
  json
  \endcode argument to the handler is \code
  nil
  \endcode, this means the server
  responded with 204 No Content and the \code
  response
  \endcode argument is guaranteed
  to be an instance of \code
  NSHTTPURLResponse
  \endcode.
  note:
  If the response is a 204 No Content, the result object
  will return \code
  nil
  \endcode for \code
  value
  \endcode.
  note:
  If you need to parse on a particular thread, such as on the main
  thread, you should just use \code
  -performRequestWithCompletionQueue:completion:
  \endcode
  instead.
  note:
  If the request is canceled, the results of the handler may be
  discarded. Any side-effects performed by your handler must be safe in
  the event of a cancelation.
  \param handler The handler to call as part of the request
  processing. This handler is not guaranteed to be called on any
  particular thread. The handler returns the new value for the request.


  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nullable))handler;
/**
  Returns a new request that parses the data as JSON and passes it through
  the specified handler.
  note:
  If the \code
  json
  \endcode argument to the handler is \code
  nil
  \endcode, this means the server
  responded with 204 No Content and the \code
  response
  \endcode argument is guaranteed
  to be an instance of \code
  NSHTTPURLResponse
  \endcode.
  note:
  If you need to parse on a particular thread, such as on the main
  thread, you should just use \code
  -performRequestWithCompletionQueue:completion:
  \endcode
  instead.
  note:
  If the request is canceled, the results of the handler may be
  discarded. Any side-effects performed by your handler must be safe in
  the event of a cancelation.
  \param omitNulls If \code
  true
  \endcode, nulls in the JSON are omitted from the result.
  If \code
  false
  \endcode, nulls are represented as \code
  NSNull
  \endcode. If the top-level value is null,
  it is always represented as \code
  NSNull
  \endcode regardless of this parameter.

  \param handler The handler to call as part of the request
  processing. This handler is not guaranteed to be called on any
  particular thread. The handler returns the new value for the request.
  If the handler returns \code
  nil
  \endcode, then if \code
  error
  \endcode is filled in with an
  error the parse is considered to have errored, otherwise the parse is
  treated as successful but with a \code
  nil
  \endcode value.


  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nullable, NSError * _Nullable * _Nullable))handler;
@end


/**
  A protocol that provides hooks for configuring the shared \code
  HTTPManager
  \endcode.
  If the application delegate conforms to this protocol, it will be asked to configure the shared \code
  HTTPManager
  \endcode.
  This will occur on first access to the global \code
  HTTP
  \endcode property.
*/
SWIFT_PROTOCOL("_TtP6PMHTTP23HTTPManagerConfigurable_")
@protocol HTTPManagerConfigurable
/**
  Invoked on first access to the global \code
  HTTP
  \endcode property.
  note:
  You should not create any requests from within this method. Doing so is not
  supported and will likely result in a misconfigured request.
  important:
  You MUST NOT access the global \code
  HTTP
  \endcode property from within this method.
  Any attempt to do so will deadlock as the property has not finished initializing.
*/
- (void)configureWithHttpManager:(HTTPManager * _Nonnull)httpManager;
- (void)configureHTTPManager:(HTTPManager * _Nonnull)httpManager;
@end


/**
  An HTTP GET/HEAD request that does not yet have a parse handler.
*/
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerDataRequest")
@interface HTTPManagerDataRequest : HTTPManagerNetworkRequest
- (nonnull instancetype)initWith__copyOfRequest:(HTTPManagerRequest * _Nonnull)request OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
@end


@interface HTTPManagerDataRequest (SWIFT_EXTENSION(PMHTTP))
/**
  The cache policy to use for the request. If \code
  NSURLRequestUseProtocolCachePolicy
  \endcode,
  the default cache policy is used. Default is \code
  NSURLRequestUseProtocolCachePolicy
  \endcode.
*/
@property (nonatomic) NSURLRequestCachePolicy cachePolicy;
/**
  Returns a new request that parses the data as JSON.
  Any nulls in the JSON are represented as \code
  NSNull
  \endcode.
  note:
  If the server responds with 204 No Content, the parse is skipped
  and \code
  HTTPManagerError.UnexpectedNoContent
  \endcode is returned as the parse result.

  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSON;
/**
  Returns a new request that parses the data as JSON.
  note:
  If the server responds with 204 No Content, the parse is skipped
  and \code
  HTTPManagerError.UnexpectedNoContent
  \endcode is returned as the parse result.
  \param omitNulls If \code
  true
  \endcode, nulls in the JSON are omitted from the result.
  If \code
  false
  \endcode, nulls are represented as \code
  NSNull
  \endcode. If the top-level value is null,
  it is always represented as \code
  NSNull
  \endcode regardless of this parameter.


  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls;
/**
  Returns a new request that parses the data as JSON and passes it through
  the specified handler. Any nulls in the JSON are represented as \code
  NSNull
  \endcode.
  note:
  If the server responds with 204 No Content, the parse is skipped
  and \code
  HTTPManagerError.UnexpectedNoContent
  \endcode is returned as the parse result.
  note:
  If you need to parse on a particular thread, such as on the main
  thread, you should just use \code
  -performRequestWithCompletionQueue:completion:
  \endcode
  instead.
  note:
  If the request is canceled, the results of the handler may be
  discarded. Any side-effects performed by your handler must be safe in
  the event of a cancelation.
  \param handler The handler to call as part of the request
  processing. This handler is not guaranteed to be called on any
  particular thread. The handler returns the new value for the request.
  If the handler returns \code
  nil
  \endcode, then if \code
  error
  \endcode is filled in with an
  error the parse is considered to have errored, otherwise the parse is
  treated as successful but with a \code
  nil
  \endcode value.


  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nullable))handler;
/**
  Returns a new request that parses the data as JSON and passes it through
  the specified handler.
  note:
  If the server responds with 204 No Content, the parse is skipped
  and \code
  HTTPManagerError.UnexpectedNoContent
  \endcode is returned as the parse result.
  note:
  If you need to parse on a particular thread, such as on the main
  thread, you should just use \code
  -performRequestWithCompletionQueue:completion:
  \endcode
  instead.
  note:
  If the request is canceled, the results of the handler may be
  discarded. Any side-effects performed by your handler must be safe in
  the event of a cancelation.
  \param omitNulls If \code
  true
  \endcode, nulls in the JSON are omitted from the result.
  If \code
  false
  \endcode, nulls are represented as \code
  NSNull
  \endcode. If the top-level value is null,
  it is always represented as \code
  NSNull
  \endcode regardless of this parameter.

  \param handler The handler to call as part of the request
  processing. This handler is not guaranteed to be called on any
  particular thread. The handler returns the new value for the request.
  If the handler returns \code
  nil
  \endcode, then if \code
  error
  \endcode is filled in with an
  error the parse is considered to have errored, otherwise the parse is
  treated as successful but with a \code
  nil
  \endcode value.


  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseAsJSONOmitNulls:(BOOL)omitNulls withHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, id _Nonnull, NSError * _Nullable * _Nullable))handler;
@end


/**
  The environment for an \code
  HTTPManager
  \endcode.
  This class does not define any default environments. You can extend this class in your application
  to add environment definitions for convenient access. For example:
  \code
  extension HTTPManagerEnvironment {
      /// The Production environment.
      @nonobjc static let Production = HTTPManagerEnvironment(baseURL: NSURL(string: "https://example.com/api/v1")!)!
      /// The Staging environment.
      @nonobjc static let Staging = HTTPManagerEnvironment(baseURL: NSURL(string: "https://stage.example.com/api/v1")!)!
  }

  \endcodeYou can also use \code
  HTTPManagerConfigurable
  \endcode to configure the initial environment on the shared \code
  HTTPManager
  \endcode.
*/
SWIFT_CLASS("_TtC6PMHTTP22HTTPManagerEnvironment")
@interface HTTPManagerEnvironment : NSObject
/**
  The base URL for the environment.
  invariant:
  The URL is an absolute URL that is valid according to RFC 3986, the URL’s path
  is either empty or has a trailing slash, and the URL has no query or fragment component.
*/
@property (nonatomic, readonly, copy) NSURL * _Nonnull baseURL;
/**
  Initializes an environment with a base URL.
  note:
  If \code
  baseURL
  \endcode has a non-empty \code
  path
  \endcode that does not end in a slash, the path is modified to
  include a trailing slash. If \code
  baseURL
  \endcode has a query or fragment component, these components are
  stripped.
  \param baseURL The base URL to use for the environment. Must be a valid absolute URL
  according to RFC 3986.


  returns:
  An \code
  HTTPManagerEnvironment
  \endcode if the base URL is a valid absolute URL, \code
  nil
  \endcode otherwise.
*/
- (nullable instancetype)initWithBaseURL:(NSURL * _Nonnull)baseURL;
- (nullable instancetype)initWithString:(NSString * _Nonnull)string;
/**
  Returns \code
  true
  \endcode if \code
  url
  \endcode is prefixed by \code
  self.baseURL
  \endcode, \code
  false
  \endcode otherwise.
  For one URL to prefix another, both URLs must have the same scheme, authority info,
  host, and port, and the first URL’s path must be a prefix of the second URL’s path.
  Scheme and host are compared case-insensitively, and if the port is nil, an appropriate
  default value is assumed for the HTTP and HTTPS schemes.
  \param url The URL to compare against. Must be a valid absolute URL according to RFC 3986,
  otherwise this method always returns \code
  false
  \endcode.

*/
- (BOOL)isPrefixOf:(NSURL * _Nonnull)url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface HTTPManagerEnvironment (SWIFT_EXTENSION(PMHTTP))
@end



@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
@end


@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/**
  Returns a new request that returns a mock response.
  \param statusCode The HTTP status code to return.

  \param headers (Optional) A collection of HTTP headers to return.

  \param data (Optional) The body of the response. If the \code
  headers
  \endcode does not provide a
  \code
  "Content-Length"
  \endcode header, one is synthesized from the data.

  \param delay (Optional) The amount of time in seconds to wait before returning the
  response. The default value is 30ms.


  returns:
  A copy of \code
  self
  \endcode that returns a mock response.
*/
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/**
  Retursn a new request that returns a mock plain text response.
  \param statusCode The HTTP status code to return.

  \param headers (Optional) A collection of HTTP headers to return. If \code
  "Content-Type"
  \endcode
  is not specified, it will default to \code
  "text/plain"
  \endcode.

  \param text The body text to return. If the \code
  headers
  \endcode does not provide a
  \code
  "Content-Length"
  \endcode header, one is synthesized from the text.

  \param delay (Optional) The amount of time in seconds to wait before returning the
  response. The default value is 30ms.


  returns:
  A copy of \code
  self
  \endcode that returns a mock plain text response.
*/
- (nonnull instancetype)mockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
@end

@class HTTPManagerTask;
@class PMHTTPDataResult;
@class NSOperationQueue;

@interface HTTPManagerNetworkRequest (SWIFT_EXTENSION(PMHTTP))
/**
  Returns a new request that parses the data with the specified handler.
  note:
  If the server responds with 204 No Content, the parse handler is
  invoked with an empty data. The handler may choose to return the error
  \code
  HTTPManagerError.UnexpectedNoContent
  \endcode if it does not handle this case.
  note:
  If you need to parse on a particular thread, such as on the main
  thread, you should just use \code
  -performRequestWithCompletionQueue:completion:
  \endcode
  instead.
  note:
  If the request is canceled, the results of the handler may be
  discarded. Any side-effects performed by your handler must be safe in
  the event of a cancelation.
  \param handler The handler to call as part of the request
  processing. This handler is not guaranteed to be called on any
  particular thread. The handler returns the new value for the request.
  If the handler returns \code
  nil
  \endcode, then if \code
  error
  \endcode is filled in with an
  error the parse is considered to have errored, otherwise the parse is
  treated as successful but with a \code
  nil
  \endcode value.


  returns:
  An \code
  HTTPManagerObjectParseRequest
  \endcode.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)parseWithHandler:(id _Nullable (^ _Nonnull)(NSURLResponse * _Nonnull, NSData * _Nonnull, NSError * _Nullable * _Nullable))handler;
/**
  Creates a suspended \code
  HTTPManagerTask
  \endcode for the request with the given completion handler.
  This method is intended for cases where you need access to the \code
  NSURLSessionTask
  \endcode prior to
  the task executing, e.g. if you need to record the task identifier somewhere before the
  completion block fires.
  important:
  After you create the task, you must start it by calling the \code
  -resume
  \endcode method.
  \param completion The handler to call when the request is done. This handler
  will be invoked on a global concurrent queue.


  returns:
  An \code
  HTTPManagerTask
  \endcode that represents the operation.
*/
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
/**
  Creates a suspended \code
  HTTPManagerTask
  \endcode for the request with the given completion handler.
  This method is intended for cases where you need access to the \code
  NSURLSessionTask
  \endcode prior to
  the task executing, e.g. if you need to record the task identifier somewhere before the
  completion block fires.
  important:
  After you create the task, you must start it by calling the \code
  resume()
  \endcode method.
  \param queue The queue to call the handler on. \code
  nil
  \endcode means the handler will
  be called on a global concurrent queue.

  \param completion The handler to call when the request is done. This handler
  will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.


  returns:
  An \code
  HTTPManagerTask
  \endcode that represents the operation.
*/
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
/**
  Performs an asynchronous request and calls the specified handler when
  done.
  \param completion The handler to call when the request is done. This
  handler is called on a global concurrent queue.


  returns:
  An \code
  HTTPManagerTask
  \endcode that represents the operation.
*/
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
/**
  Performs an asynchronous request and calls the specified handler when
  done.
  \param queue The queue to call the handler on. May be \code
  nil
  \endcode.

  \param completion The handler to call when the request is done. This handler
  will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.


  returns:
  An \code
  HTTPManagerTask
  \endcode that represents the operation.
*/
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPDataResult * _Nonnull))completion;
@end

@class PMHTTPResult;

/**
  An HTTP request that has a parse handler.
  note:
  This class is only meant to be used from Obj-C.
*/
SWIFT_CLASS("_TtC6PMHTTP29HTTPManagerObjectParseRequest")
@interface HTTPManagerObjectParseRequest : HTTPManagerRequest
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull parameters;
@property (nonatomic, strong) NSURLCredential * _Nullable credential;
@property (nonatomic) BOOL shouldFollowRedirects;
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@property (nonatomic) BOOL allowsCellularAccess;
@property (nonatomic) BOOL userInitiated;
@property (nonatomic, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
@property (nonatomic) BOOL assumeErrorsAreJSON;
@property (nonatomic) BOOL affectsNetworkActivityIndicator;
/**
  The expected MIME type of the response. Defaults to \code
  ["application/json"]
  \endcode for
  JSON parse requests, or \code
  []
  \endcode for requests created with \code
  -parseWithHandler:
  \endcode.
  This property is used to generate the \code
  Accept
  \endcode header, if not otherwise specified by
  the request. If multiple values are provided, they’re treated as a priority list
  for the purposes of the \code
  Accept
  \endcode header.
  This property is also used to validate the MIME type of the response. If the
  response is a 204 No Content, the MIME type is not checked. For all other 2xx
  responses, if at least one expected content type is provided, the MIME type
  must match one of them. If it doesn’t match any, the parse handler will be
  skipped and \code
  HTTPManagerError.UnexpectedContentType
  \endcode will be returned as the result.
  note:
  The MIME type is only tested if the response includes a \code
  Content-Type
  \endcode header.
  If the \code
  Content-Type
  \endcode header is missing, the response will always be assumed to be
  valid. The value is tested against both the \code
  Content-Type
  \endcode header and, if it differs,
  the \code
  NSURLResponse
  \endcode property \code
  MIMEType
  \endcode. This is to account for cases where the
  protocol implementation detects a different content type than the server declared.
  Each media type in the list may include parameters. These parameters will be included
  in the \code
  Accept
  \endcode header, but will be ignored for the purposes of comparing against the
  resulting MIME type. If the media type includes a parameter named \code
  q
  \endcode, this parameter
  should be last, as it will be interpreted by the \code
  Accept
  \endcode header as the priority
  instead of as a parameter of the media type.
  note:
  Changing the \code
  expectedContentTypes
  \endcode does not affect the behavior of the parse
  handler. If you create a request using \code
  -parseAsJSON
  \endcode and then change the
  \code
  expectedContentTypes
  \endcode to \code
  ["text/plain"]
  \endcode, if the server returns a \code
  "text/plain"
  \endcode
  response, the parse handler will still assume it’s JSON and attempt to decode it.
  important:
  The media types in this list will not be checked for validity. They must
  follow the rules for well-formed media types, otherwise the server may handle the
  request incorrectly.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull expectedContentTypes;
/**
  Creates a suspended \code
  HTTPManagerTask
  \endcode for the request with the given completion handler.
  This method is intended for cases where you need access to the \code
  NSURLSessionTask
  \endcode prior to
  the task executing, e.g. if you need to record the task identifier somewhere before the
  completion block fires.
  important:
  After you create the task, you must start it by calling the \code
  -resume
  \endcode method.
  \param completion The handler to call when the request is done. This handler
  will be invoked on a global concurrent queue.


  returns:
  An \code
  HTTPManagerTask
  \endcode that represents the operation.
*/
- (HTTPManagerTask * _Nonnull)createTaskWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
/**
  Creates a suspended \code
  HTTPManagerTask
  \endcode for the request with the given completion handler.
  This method is intended for cases where you need access to the \code
  NSURLSessionTask
  \endcode prior to
  the task executing, e.g. if you need to record the task identifier somewhere before the
  completion block fires.
  important:
  After you create the task, you must start it by calling the \code
  resume()
  \endcode method.
  \param queue The queue to call the handler on. \code
  nil
  \endcode means the handler will
  be called on a global concurrent queue.

  \param completion The handler to call when the request is done. This handler
  will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.


  returns:
  An \code
  HTTPManagerTask
  \endcode that represents the operation.
*/
- (HTTPManagerTask * _Nonnull)createTaskWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
/**
  Performs an asynchronous request and calls the specified handler when
  done.
  \param completion The handler to call when the request is done. This
  handler is called on a global concurrent queue.


  returns:
  An \code
  HTTPManagerTask
  \endcode that represents the operation.
*/
- (HTTPManagerTask * _Nonnull)performRequestWithCompletion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
/**
  Performs an asynchronous request and calls the specified handler when
  done.
  \param queue The queue to call the handler on. May be \code
  nil
  \endcode.

  \param completion The handler to call when the request is done. This handler
  will be invoked on <em>queue</em> if provided, otherwise on a global concurrent queue.


  returns:
  An \code
  HTTPManagerTask
  \endcode that represents the operation.
*/
- (HTTPManagerTask * _Nonnull)performRequestWithCompletionQueue:(NSOperationQueue * _Nullable)queue completion:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, PMHTTPResult * _Nonnull))completion;
- (nonnull instancetype)initWith__copyOfRequest:(HTTPManagerRequest * _Nonnull)request OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
@end


@interface HTTPManagerObjectParseRequest (SWIFT_EXTENSION(PMHTTP))
/**
  Returns a new request that returns a mock response.
  Requests with a mock response will not hit the network and will not invoke the
  parse handler.
  Any network mock inherited from an \code
  HTTPManagerNetworkRequest
  \endcode will be overwritten
  by this method.
  seealso:
  \code
  mock(headers:value:delay:)
  \endcode.
  \param value The parsed value to return.


  returns:
  A copy of \code
  self
  \endcode that returns a mock response.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)mock:(id _Nullable)value;
/**
  Returns a new request that returns a mock response.
  Requests with a mock response will not hit the network and will not invoke the
  parse handler.
  Any network mock inherited from an \code
  HTTPManagerNetworkRequest
  \endcode will be overwritten
  by this method.
  \param headers A collection of HTTP headers to return.

  \param value The parsed object to return.

  \param delay The amount of time in seconds to wait before returning the
  response. The default value is 30ms.


  returns:
  A copy of \code
  self
  \endcode that returns a mock response.
*/
- (HTTPManagerObjectParseRequest * _Nonnull)mockWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers value:(id _Nullable)value delay:(NSTimeInterval)delay;
@end



@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
@end

@class NSNumber;

@interface HTTPManagerRequest (SWIFT_EXTENSION(PMHTTP))
/**
  The request method.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull requestMethod;
/**
  \code
  true
  \endcode if the request is idempotent, otherwise \code
  false
  \endcode. A request is idempotent if
  the side-effects of N > 0 identical requests is the same as for a single request,
  or in other words, the request can be repeated without changing anything.
  note:
  A sequence of several idempotent requests may not be idempotent as a whole.
  This could be because a later request in the sequence changes something that
  affects an earlier request.
  This property normally only affects retry behavior for failed requests, although
  it could be used for external functionality such as showing a Retry button in an
  error dialog. The value of this property is exposed on \code
  HTTPManagerTask
  \endcode as well.
  note:
  When writing external functionality that uses \code
  isIdempotent
  \endcode (such as showing
  a Retry button) it’s generally a good idea to only repeat requests that failed.
  It should be safe to repeat successful idempotent network requests, but parse requests
  may have parse handlers with side-effects. If you care about idempotence for successful
  or canceled requests, you should ensure that all parse handlers are idempotent or
  mark any relevant parse requests as non-idempotent.
  The default value is \code
  true
  \endcode for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests,
  and \code
  false
  \endcode for POST, PATCH, CONNECT, or unknown request methods.
*/
@property (nonatomic, getter=isIdempotent) BOOL idempotent;
/**
  The timeout interval of the request, in seconds. If \code
  nil
  \endcode, the session’s default
  timeout interval is used. Default is \code
  nil
  \endcode.
*/
@property (nonatomic, strong) NSNumber * _Nullable timeoutInterval;
/**
  The cache policy to use for the request. If \code
  NSURLRequestUseProtocolCachePolicy
  \endcode,
  the default cache policy is used. Default is \code
  NSURLRequestUseProtocolCachePolicy
  \endcode
  for GET/HEAD requests and \code
  NSURLRequestReloadIgnoringLocalCacheData
  \endcode for
  POST/PUT/PATCH/DELETE requests.
*/
@property (nonatomic, readonly) NSURLRequestCachePolicy cachePolicy;
/**
  Additional HTTP header fields to pass in the request. Default is \code
  [:]
  \endcode.
  If not specified, the request will fill in \code
  Accept
  \endcode and \code
  Accept-Language
  \endcode
  automatically when performing the request.
  note:
  If \code
  self.credential
  \endcode is non-\code
  nil
  \endcode, the \code
  Authorization
  \endcode header will be
  ignored. \code
  Content-Type
  \endcode and \code
  Content-Length
  \endcode are always ignored.
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull headerFields;
/**
  Adds an HTTP header to the list of header fields.
  If a value was previously set for the specified <em>field</em>, the supplied <em>value</em> is appended
  to the existing value using the appropriate field delimiter.
  \param value The value for the header field.

  \param field The name of the header field. Header fields are case-insensitive.

*/
- (void)addValue:(NSString * _Nonnull)value forHeaderField:(NSString * _Nonnull)field;
/**
  Sets a specified HTTP header field.
  \param value The value for the header field.

  \param field The name of the header field. Header fields are case-insensitive.

*/
- (void)setValue:(NSString * _Nonnull)value forHeaderField:(NSString * _Nonnull)field;
/**
  Returns a specified HTTP header field, if set.
  \param field The name of the header field. Header fields are case-insensitive.


  returns:
  The value for the header field, or \code
  nil
  \endcode if no value was set.
*/
- (NSString * _Nullable)valueForHeaderField:(NSString * _Nonnull)field;
@end


/**
  Represents the retry behavior for an HTTP request.
  Retry behaviors provide a mechanism for requests to automatically retry upon failure before
  notifying the caller about the failure. Any arbitrary retry behavior can be implemented, but
  convenience methods are provided for some of the more common behaviors.
  Unless otherwise specified, retry behaviors are only evaluated for idempotent requests.
  This is controlled by the \code
  isIdempotent
  \endcode property of \code
  HTTPManagerRequest
  \endcode, which defaults to
  \code
  true
  \endcode for GET, HEAD, PUT, DELETE, OPTIONS, and TRACE requests, and \code
  false
  \endcode otherwise.
  note:
  Retry behaviors are evaluated on an arbitrary dispatch queue.
*/
SWIFT_CLASS("_TtC6PMHTTP24HTTPManagerRetryBehavior")
@interface HTTPManagerRetryBehavior : NSObject
/**
  Returns a retry behavior that evaluates a block.
  The returned retry behavior will be evaluated only for idempotent requests. If the request involves
  redirections, the original request will be evaluated for idempotence (and in the event of a retry,
  the original request is the one that is retried).
  note:
  The block will be executed on an arbitrary dispatch queue.
  The block takes the following parameters:
  \param task The \code
  HTTPManagerTask
  \endcode under consideration. You can use this task
  to retrieve the last \code
  networkTask
  \endcode and its \code
  originalRequest
  \endcode and \code
  response
  \endcode.

  \param error The error that occurred. This may be an error from the networking portion
  or it may be an error from the processing stage.

  \param attempt The number of retries so far. The first retry block is attempt \code
  0
  \endcode, the second is
  attempt \code
  1
  \endcode, etc.

  \param callback A block that must be invoked to determine whether a retry should be done.
  Passing \code
  true
  \endcode means the request should be automatically retried, \code
  false
  \endcode means no retry.
  This block may be executed immediately or it may be saved and executed later on any thread or queue.
  <em>Important:</em> This block must be executed at some point or the task will be stuck in the
  \code
  .Processing
  \endcode state forever.
  <em>Requires:</em> This block must not be executed more than once.

*/
- (nonnull instancetype)init:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a retry behavior that evaluates a block.
  The returned retry behavior will be evaluated for all requests regardless of whether the request
  is idempotent. If the request involves redirections, the original request is the one that is retried.
  important:
  Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
  and only retry those requests where performing the request twice is safe. Your handler shold consult
  the \code
  originalRequest
  \endcode property of the task for making this determination.
  The block takes the following parameters:
  \param task The \code
  HTTPManagerTask
  \endcode under consideration. You can use this task
  to retrieve the last \code
  networkTask
  \endcode and its \code
  originalRequest
  \endcode and \code
  response
  \endcode.

  \param error The error that occurred. This may be an error from the networking portion
  or it may be an error from the processing stage.

  \param attempt The number of retries so far. The first retry block is attempt \code
  0
  \endcode, the second is
  attempt \code
  1
  \endcode, etc.

  \param callback A block that must be invoked to determine whether a retry should be done.
  Passing \code
  true
  \endcode means the request should be automatically retried, \code
  false
  \endcode means no retry.
  This block may be executed immediately or it may be saved and executed later on any thread or queue.
  <em>Important:</em> This block must be executed at some point or the task will be stuck in the
  \code
  .Processing
  \endcode state forever.
  <em>Requires:</em> This block must not be executed more than once.

*/
- (nonnull instancetype)initWithIgnoringIdempotence:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) void (^ _Nonnull handler)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL));
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface HTTPManagerRetryBehavior (SWIFT_EXTENSION(PMHTTP))
/**
  Returns a retry behavior that evaluates a block.
  The returned retry behavior will be evaluated only for idempotent requests. If the request involves
  redirections, the original request will be evaluated for idempotence (and in the event of a retry,
  the original request is the one that is retried).
  note:
  The block will be executed on an arbitrary dispatch queue.
  The block takes the following parameters:
  \param task The \code
  HTTPManagerTask
  \endcode under consideration. You can use this task
  to retrieve the last \code
  networkTask
  \endcode and its \code
  originalRequest
  \endcode and \code
  response
  \endcode.

  \param error The error that occurred. This may be an error from the networking portion
  or it may be an error from the processing stage.

  \param attempt The number of retries so far. The first retry block is attempt \code
  0
  \endcode, the second is
  attempt \code
  1
  \endcode, etc.

  \param callback A block that must be invoked to determine whether a retry should be done.
  Passing \code
  true
  \endcode means the request should be automatically retried, \code
  false
  \endcode means no retry.
  This block may be executed immediately or it may be saved and executed later on any thread or queue.
  <em>Important:</em> This block must be executed at some point or the task will be stuck in the
  \code
  .Processing
  \endcode state forever.
  <em>Requires:</em> This block must not be executed more than once.

*/
- (nonnull instancetype)retryBehaviorWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler;
/**
  Returns a retry behavior that evaluates a block.
  The returned retry behavior will be evaluated for all requests regardless of whether the request
  is idempotent. If the request involves redirections, the original request is the one that is retried.
  important:
  Your handler needs to be aware of whether it’s being invoked on a non-idempotent request
  and only retry those requests where performing the request twice is safe. Your handler shold consult
  the \code
  originalRequest
  \endcode property of the task for making this determination.
  The block takes the following parameters:
  \param task The \code
  HTTPManagerTask
  \endcode under consideration. You can use this task
  to retrieve the last \code
  networkTask
  \endcode and its \code
  originalRequest
  \endcode and \code
  response
  \endcode.

  \param error The error that occurred. This may be an error from the networking portion
  or it may be an error from the processing stage.

  \param attempt The number of retries so far. The first retry block is attempt \code
  0
  \endcode, the second is
  attempt \code
  1
  \endcode, etc.

  \param callback A block that must be invoked to determine whether a retry should be done.
  Passing \code
  true
  \endcode means the request should be automatically retried, \code
  false
  \endcode means no retry.
  This block may be executed immediately or it may be saved and executed later on any thread or queue.
  <em>Important:</em> This block must be executed at some point or the task will be stuck in the
  \code
  .Processing
  \endcode state forever.
  <em>Requires:</em> This block must not be executed more than once.

*/
- (nonnull instancetype)retryBehaviorIgnoringIdempotenceWithHandler:(void (^ _Nonnull)(HTTPManagerTask * _Nonnull, NSError * _Nonnull, NSInteger, void (^ _Nonnull)(BOOL)))handler;
/**
  Returns a retry behavior that retries once automatically for networking errors.
  A networking error is defined as many errors in the \code
  NSURLErrorDomain
  \endcode, or a
  \code
  PMJSON.JSONParserError
  \endcode with a code of \code
  .UnexpectedEOF
  \endcode (as this may indicate a
  truncated response). The request will not be retried for networking errors that
  are unlikely to change when retrying.
  If the request is non-idempotent, it only retries if the error indicates that a
  connection was never made to the server (such as cannot find host).
  \param including503ServiceUnavailable If \code
  YES
  \endcode, retries on a 503 Service Unavailable
  response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
  as the server did not handle the original request. If \code
  NO
  \endcode, only networking failures
  are retried.

*/
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureOnceIncluding503ServiceUnavailable:(BOOL)including503ServiceUnavailable;
/**
  Returns a retry behavior that retries twice automatically for networking errors.
  The first retry happens immediately, and the second retry happens after a given
  delay.
  A networking error is defined as many errors in the \code
  NSURLErrorDomain
  \endcode, or a
  \code
  PMJSON.JSONParserError
  \endcode with a code of \code
  .UnexpectedEOF
  \endcode (as this may indicate a
  truncated response). The request will not be retried for networking errors that
  are unlikely to change when retrying.
  If the request is non-idempotent, it only retries if the error indicates that a
  connection was never made to the server (such as cannot find host).
  \param delay The amount of time in seconds to wait before the second retry.

  \param including503ServiceUnavailable If \code
  YES
  \endcode, retries on a 503 Service Unavailable
  response as well. Non-idempotent requests will also be retried on a 503 Service Unavailable
  as the server did not handle the original request. If \code
  NO
  \endcode, only networking failures
  are retried.

*/
+ (HTTPManagerRetryBehavior * _Nonnull)retryNetworkFailureTwiceWithDelay:(NSTimeInterval)delay including503ServiceUnavailable:(BOOL)including503ServiceUnavailable;
@end

@class NSURLSessionTask;
enum HTTPManagerTaskState : unsigned char;

/**
  An initiated HTTP operation.
  <em>Thread safety:</em> All methods in this class are safe to call from any thread.
*/
SWIFT_CLASS("_TtC6PMHTTP15HTTPManagerTask")
@interface HTTPManagerTask : NSObject
/**
  The underlying \code
  URLSessionTask
  \endcode.
  If a failed request is automatically retried, this property value
  will change.
  note:
  This property supports key-value observing.
*/
@property (nonatomic, readonly, strong) NSURLSessionTask * _Nonnull networkTask;
/**
  The \code
  URLCredential
  \endcode used to authenticate the request, if any.
*/
@property (nonatomic, readonly, strong) NSURLCredential * _Nullable credential;
/**
  The current state of the task.
  note:
  This property is thread-safe and may be accessed concurrently.
  note:
  This property supports KVO. The KVO notifications will execute
  on an arbitrary thread.
*/
@property (nonatomic, readonly) enum HTTPManagerTaskState state;
+ (BOOL)automaticallyNotifiesObserversForKey:(NSString * _Nonnull)_;
/**
  Invokes \code
  resume()
  \endcode on the underlying \code
  NSURLSessionTask
  \endcode.
  important:
  You should always use this method instead of invoking \code
  resume()
  \endcode
  on the \code
  networkTask
  \endcode.
  note:
  To suspend the underlying task you can access it with the
  \code
  networkTask
  \endcode property. However, suspending the task will not remove it from
  the list of outstanding tasks used to control the network activity indicator.
*/
- (void)resume;
/**
  Cancels the operation, if it hasn’t already completed.
  If the operation is still talking to the network, the underlying network
  task is canceled. If the operation is processing the results, the
  results processor is canceled at the earliest opportunity.
  Calling this on a task that’s already moved to \code
  .Completed
  \endcode is a no-op.
*/
- (void)cancel;
@property (nonatomic, readonly) BOOL userInitiated;
@property (nonatomic, readonly) BOOL followRedirects;
@property (nonatomic, readonly) BOOL assumeErrorsAreJSON;
@property (nonatomic, readonly) NSURLCacheStoragePolicy defaultResponseCacheStoragePolicy;
@property (nonatomic, readonly, strong) HTTPManagerRetryBehavior * _Nullable retryBehavior;
@property (nonatomic, readonly) BOOL affectsNetworkActivityIndicator;
- (nonnull instancetype)initWithNetworkTask:(NSURLSessionTask * _Nonnull)networkTask request:(HTTPManagerRequest * _Nonnull)request sessionDelegateQueue:(NSOperationQueue * _Nonnull)sessionDelegateQueue OBJC_DESIGNATED_INITIALIZER;
/**
  Sets the tracking network activity flag and increments the \code
  NetworkActivityManager
  \endcode counter
  if the flag wasn’t previously set.
*/
- (void)setTrackingNetworkActivity;
/**
  Clears the tracking network activity flag and decrements the \code
  NetworkActivityManager
  \endcode counter
  if the flag was previously set.
*/
- (void)clearTrackingNetworkActivity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
/**
  \code
  true
  \endcode if the request is idempotent, otherwise \code
  false
  \endcode. A request is idempotent if
  the side-effects of N > 0 identical requests is the same as for a single request,
  or in other words, the request can be repeated without changing anything.
  note:
  A sequence of several idempotent requests may not be idempotent as a whole.
  This could be because a later request in the sequence changes something that
  affects an earlier request.
  This property normally only affects retry behavior for failed requests, although
  it could be used for external functionality such as showing a Retry button in an
  error dialog.
*/
@property (nonatomic, readonly, getter=isIdempotent) BOOL idempotent;
@end


@interface HTTPManagerTask (SWIFT_EXTENSION(PMHTTP))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/**
  The state of an \code
  HTTPManagerTask
  \endcode.
*/
typedef SWIFT_ENUM(unsigned char, HTTPManagerTaskState) {
/**
  The task is currently running.
*/
  HTTPManagerTaskStateRunning = 0,
/**
  The task is processing results (e.g. parsing JSON).
*/
  HTTPManagerTaskStateProcessing = 1,
/**
  The task has been canceled. The completion handler may or may not
  have been invoked yet.
*/
  HTTPManagerTaskStateCanceled = 2,
/**
  The task has completed. The completion handler may or may not have
  been invoked yet.
*/
  HTTPManagerTaskStateCompleted = 3,
};


/**
  An HTTP POST/PUT/PATCH request with binary data that does not yet have a parse handler.
  The body of this request is a given \code
  NSData
  \endcode object. Any \code
  parameters
  \endcode are passed in the
  query string.
*/
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadDataRequest")
@interface HTTPManagerUploadDataRequest : HTTPManagerActionRequest
/**
  The data to upload.
*/
@property (nonatomic, copy) NSData * _Nonnull uploadData;
@property (nonatomic, copy) NSString * _Nonnull contentType;
- (nonnull instancetype)initWith__copyOfRequest:(HTTPManagerRequest * _Nonnull)request OBJC_DESIGNATED_INITIALIZER;
@end

@class HTTPManagerUploadMultipart;

/**
  An HTTP POST/PUT/PATCH request with form data that does not yet have a parse handler.
  By default, any request parameters (see \code
  HTTPManagerRequest.parameters
  \endcode) are
  passed as \code
  application/x-www-form-urlencoded
  \endcode. Adding any multipart bodies
  passes everything as \code
  multipart/form-data
  \endcode instead. When mixing <em>parameters</em>
  and multipart bodies, the <em>parameters</em> are sent prior to any multipart bodies.
*/
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadFormRequest")
@interface HTTPManagerUploadFormRequest : HTTPManagerActionRequest
/**
  The URL for the request, including any query items as appropriate.
*/
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/**
  The Content-Type for the request.

  returns:
  Either \code
  "application/x-www-form-urlencoded"
  \endcode or \code
  "multipart/form-data"
  \endcode
  depending on the nature of the upload.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/**
  Specifies a named multipart body for this request.
  Calling this method sets the request’s overall Content-Type to
  \code
  multipart/form-data
  \endcode.
  bug:
  \code
  name
  \endcode and \code
  filename
  \endcode are assumed to be ASCII and not need any escaping.
  \param data The data for the multipart body, such as an image or text.

  \param name The name of the multipart body. This is the name the server expects.

  \param mimeType The MIME content type of the multipart body. Optional.

  \param filename The filename of the attachment. Optional.

*/
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/**
  Specifies a named multipart body for this request.
  The Content-Type of the multipart body will always be
  \code
  text/plain; charset=utf-8
  \endcode.
  Calling this method sets the request’s overall Content-Type to
  \code
  multipart/form-data
  \endcode.
  bug:
  \code
  name
  \endcode is assumed to be ASCII and not need any escaping.
  \param text The text of the multipart body.

  \param name The name of the multipart body. This is the name the server expects.

*/
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
/**
  Adds a block that’s invoked asynchronously to provide multipart bodies for this request.
  The block is invoked on an arbitrary thread when task requests a new body stream.
  Any multipart bodies added by the block will be inserted into the request body.
  The associated block will only ever be invoked once even if the request is used to create
  multiple tasks.
  note:
  Using this method means that the \code
  Content-Length
  \endcode cannot be calculated for this
  request. When calling APIs that need a defined \code
  Content-Length
  \endcode you must provide all
  of the upload data up-front.
  seealso:
  \code
  addMultipart(data:withName:mimeType:filename:)
  \endcode,
  \code
  addMultipart(text:withName:)
  \endcode.
  \param block The block that provides the multipart bodies. This block is
  invoked on an arbitrary background thread. The \code
  HTTPManagerUploadMultipart
  \endcode
  parameter can be used to add multipart bodies to the request. This object is
  only valid for the duration of the block’s execution.

*/
- (void)addMultipartBodyWithBlock:(void (^ _Nonnull)(HTTPManagerUploadMultipart * _Nonnull))block;
- (nonnull instancetype)initWith__copyOfRequest:(HTTPManagerRequest * _Nonnull)request OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPManagerUploadFormRequest (SWIFT_EXTENSION(PMHTTP))
@end


/**
  An HTTP POST/PUT/PATCH for JSON data that does not yet have a parse handler.
  The body of this request is a JSON blob. Any \code
  parameters
  \endcode are passed in the
  query string.
*/
SWIFT_CLASS("_TtC6PMHTTP28HTTPManagerUploadJSONRequest")
@interface HTTPManagerUploadJSONRequest : HTTPManagerActionRequest
/**
  The Content-Type for the request.

  returns:
  \code
  "application/json"
  \endcode.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
- (nonnull instancetype)initWith__copyOfRequest:(HTTPManagerRequest * _Nonnull)request OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPManagerUploadJSONRequest (SWIFT_EXTENSION(PMHTTP))
/**
  The JSON data to upload.
  requires:
  Values assigned to this property must be json-compatible.
*/
@property (nonatomic) id _Nonnull uploadJSON;
@end


/**
  Helper class for \code
  HTTPManagerUploadFormRequest.addMultipartBody(with:)
  \endcode.
*/
SWIFT_CLASS("_TtC6PMHTTP26HTTPManagerUploadMultipart")
@interface HTTPManagerUploadMultipart : NSObject
/**
  Specifies a named multipart body for this request.
  Calling this method sets the request’s overall Content-Type to
  \code
  multipart/form-data
  \endcode.
  bug:
  \code
  name
  \endcode and \code
  filename
  \endcode are assumed to be ASCII and not need any escaping.
  \param data The data for the multipart body, such as an image or text.

  \param name The name of the multipart body. This is the name the server expects.

  \param mimeType The MIME content type of the multipart body. Optional.

  \param filename The filename of the attachment. Optional.

*/
- (void)addMultipartData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name mimeType:(NSString * _Nullable)mimeType filename:(NSString * _Nullable)filename;
/**
  Specifies a named multipart body for this request.
  The Content-Type of the multipart body will always be
  \code
  text/plain; charset=utf-8
  \endcode.
  Calling this method sets the request’s overall Content-Type to
  \code
  multipart/form-data
  \endcode.
  bug:
  \code
  name
  \endcode is assumed to be ASCII and not need any escaping.
  \param text The text of the multipart body.

  \param name The name of the multipart body. This is the name the server expects.

*/
- (void)addMultipartText:(NSString * _Nonnull)text withName:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPManagerUploadMultipart (SWIFT_EXTENSION(PMHTTP))
@end

@protocol HTTPMockToken;
@class HTTPMockSequence;
@class OS_dispatch_queue;
@class NSHTTPURLResponse;

/**
  Manages a set of mocks for the \code
  HTTPManager
  \endcode.
  The mocks associated with this class may match requests based on path (relative to the environment)
  or absolute URL. If the path or URL contains any path component of the form \code
  :name
  \endcode, any (non-empty)
  component value will match and the matched value will be made available to block-based mocks.
  For example the path \code
  "users/:id"
  \endcode will match a request for \code
  "users/1234"
  \endcode but will not match
  a request for \code
  "users"
  \endcode.
  All mocks are evaluated in reverse order of addition. This means that if two mocks would match the
  same URL, whichever mock was added last is used.
  <em>Thread safety:</em> All methods in this class are safe to call from any thread.
*/
SWIFT_CLASS("_TtC6PMHTTP15HTTPMockManager")
@interface HTTPMockManager : NSObject
/**
  If \code
  true
  \endcode, any URL that is part of the current environment but not handled by any mocks
  will return a 500 Internal Server Error. The default value is \code
  false
  \endcode.
  seealso:
  interceptUnhandledExternalURLs
*/
@property (nonatomic) BOOL interceptUnhandledEnvironmentURLs;
/**
  If \code
  true
  \endcode, any URL that is not part of the current environment but not handled by any mocks
  will return a 500 Internal Server Error. The default value is \code
  false
  \endcode.
  seealso:
  interceptUnhandledEnvironmentURLs
*/
@property (nonatomic) BOOL interceptUnhandledExternalURLs;
/**
  Adds a mock to the mock manager that returns a given response.
  All requests that match this mock will be given the same response.
  \param url The URL to mock. This may be a relative URL, which is evaluated against the
  environment active at the time the request is made, or it may be an absolute URL. The URL
  may include path components of the form \code
  :name
  \endcode to match any (non-empty) component value.

  \param httpMethod (Optional) The HTTP method to be mocked. The default value of \code
  nil
  \endcode
  means this mock will match any HTTP method.

  \param statusCode The HTTP status code to return.

  \param headers (Optional) A collection of HTTP headers to return.

  \param data (Optional) The body of the response. If the \code
  headers
  \endcode does not provide a
  \code
  "Content-Length"
  \endcode header, one is synthesized from the data.

  \param delay (Optional) The amount of time in seconds to wait before returning the
  response. The default value is 30ms.


  returns:
  An \code
  HTTPMockToken
  \endcode object that can be used to unregister the mock later.
*/
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/**
  Adds a mock to the mock manager that returns a given plain text response.
  All requests that match this mock will be given the same response.
  \param url The URL to mock. This may be a relative URL, which is evaluated against the
  environment active at the time the request is made, or it may be an absolute URL. The URL
  may include path components of the form \code
  :name
  \endcode to match any (non-empty) component value.

  \param httpMethod (Optional) The HTTP method to be mocked. The default value of \code
  nil
  \endcode
  means this mock will match any HTTP method.

  \param statusCode The HTTP status code to return.

  \param headers (Optional) A collection of HTTP headers to return. If \code
  "Content-Type"
  \endcode
  is not specified, it will default to \code
  "text/plain"
  \endcode.

  \param text The body text to return. If the \code
  headers
  \endcode does not provide a
  \code
  "Content-Length"
  \endcode header, one is synthesized from the text.

  \param delay (Optional) The amount of time in seconds to wait before returning the
  response. The default value is 30ms.


  returns:
  An \code
  HTTPMockToken
  \endcode object that can be used to unregister the mock later.
*/
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod statusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
/**
  Adds a mock to the mock manager that returns a given sequence of responses.
  Each request that matches this mock will be given the next response in the sequence.
  \param url The URL to mock. This may be a relative URL, which is evaluated against the
  environment active at the time the request is made, or it may be an absolute URL. The URL
  may include path components of the form \code
  :name
  \endcode to match any (non-empty) component value.

  \param httpMethod (Optional) The HTTP method to be mocked. The default value of \code
  nil
  \endcode
  means this mock will match any HTTP method.

  \param sequence an \code
  HTTPMockSequence
  \endcode with the sequence of responses to provide.


  returns:
  An \code
  HTTPMockToken
  \endcode object that can be used to unregister the mock later.
*/
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod sequence:(HTTPMockSequence * _Nonnull)sequence;
/**
  Adds a mock to the mock manager that evaluates a block to provide the response.
  \param url The URL to mock. This may be a relative URL, which is evaluated against the
  environment active at the time the request is made, or it may be an absolute URL. The URL
  may include path components of the form \code
  :name
  \endcode to match any (non-empty) component value.

  \param httpMethod (Optional) The HTTP method to be mocked. The default value of \code
  nil
  \endcode
  means this mock will match any HTTP method.

  \param queue (Optional) A \code
  dispatch_queue_t
  \endcode to run the handler on. The default value
  of \code
  nil
  \endcode means to use a private serial queue.

  \param handler A block to execute in order to provide the mock response. The block
  has arguments \code
  request
  \endcode, \code
  parameters
  \endcode, and \code
  completion
  \endcode. \code
  request
  \endcode is the \code
  NSURLRequest
  \endcode
  that matched the mock. \code
  parameters
  \endcode is a dictionary that contains a value for each \code
  :name
  \endcode
  token from the \code
  url
  \endcode (note: the key is just \code
  "name"
  \endcode, not \code
  ":name"
  \endcode). \code
  completion
  \endcode is a
  block that must be invoked to provide the response. The \code
  completion
  \endcode block may be invoked
  from any queue, but it is an error to not invoke it at all or to invoke it twice.


  returns:
  An \code
  HTTPMockToken
  \endcode object that can be used to unregister the mock later.
*/
- (id <HTTPMockToken> _Nonnull)addMockFor:(NSString * _Nonnull)url httpMethod:(NSString * _Nullable)httpMethod queue:(OS_dispatch_queue * _Nullable)queue handler:(void (^ _Nonnull)(NSURLRequest * _Nonnull, NSDictionary<NSString *, NSString *> * _Nonnull, void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull, NSData * _Nonnull)))handler;
/**
  Removes a previously-registered mock from the mock manager.
  Calling this with a token that was already removed, or with a token from another mock
  manager, is a no-op.
  \param token An \code
  HTTPMockToken
  \endcode returned by a previous call to \code
  addMock
  \endcode.

*/
- (void)removeMock:(id <HTTPMockToken> _Nonnull)token;
/**
  Removes all mocks from the mock manager.
*/
- (void)removeAllMocks;
/**
  Resets the mock manager back to the defaults.
  This removes all mocks and resets all properties back to their default values.
*/
- (void)reset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPMockManager (SWIFT_EXTENSION(PMHTTP))
/**
  A convenience function for reading the body data from an \code
  NSURLRequest
  \endcode.
  If the request has \code
  HTTPBody
  \endcode set, it is returned, otherwise if it has \code
  HTTPBodyStream
  \endcode,
  the stream is read to exhaustion. If the request has no body, an empty \code
  NSData
  \endcode is returned.
  warning:
  If the request has an \code
  HTTPBodyStream
  \endcode but it cannot be opened (e.g. because it
  has already been read), an empty \code
  NSData
  \endcode is returned. Similarly, if the stream takes longer
  than 400ms to open, an empty \code
  NSData
  \endcode is returned.
  This function is primarily intended to be used from within a handler block passed to
  \code
  addMock(for:httpMethod:queue:handler:)
  \endcode.
*/
- (NSData * _Nonnull)dataFromRequest:(NSURLRequest * _Nonnull)request;
@end


@interface HTTPMockManager (SWIFT_EXTENSION(PMHTTP))
@end


/**
  Represents a sequence of mock responses that will be returned from successive requests
  that are handled by the same mock.
  Responses added to the sequence are returned in the same order. If more requests are made
  than responses added to the sequence, all subsequence requests will return a generic
  500 Internal Server Error response. The property \code
  repeatsLastResponse
  \endcode can be used to
  instead repeat the final response over and over.
  <em>Thread safety:</em> Instances of this class may not be accessed concurrently from multiple
  threads at the same time.
*/
SWIFT_CLASS("_TtC6PMHTTP16HTTPMockSequence")
@interface HTTPMockSequence : NSObject
/**
  If \code
  true
  \endcode, the last response in the sequence is repeated for all future requests.
  Otherwise, once the sequence has been exhausted, future requests will serve up a
  500 Internal Server Error response. The default value is \code
  false
  \endcode.
*/
@property (nonatomic) BOOL repeatsLastResponse;
/**
  Adds a mock to the sequence that returns a given response.
  \param statusCode The HTTP status code to return.

  \param headers (Optional) A collection of HTTP headers to return.

  \param data (Optional) The body of the response. If the \code
  headers
  \endcode does not provide a
  \code
  "Content-Length"
  \endcode header, one is synthesized from the data.

  \param delay (Optional) The amount of time in seconds to wait before returning the
  response. The default value is 30ms.

*/
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers data:(NSData * _Nonnull)data delay:(NSTimeInterval)delay;
/**
  Adds a mock to the sequence that returns a given plain text response.
  \param statusCode The HTTP status code to return.

  \param headers (Optional) A collection of HTTP headers to return. If \code
  "Content-Type"
  \endcode
  is not specified, it will default to \code
  "text/plain"
  \endcode.

  \param text The body text to return. If the \code
  headers
  \endcode does not provide a
  \code
  "Content-Length"
  \endcode header, one is synthesized from the text.

  \param delay (Optional) The amount of time in seconds to wait before returning the
  response. The default value is 30ms.

*/
- (void)addMockWithStatusCode:(NSInteger)statusCode headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers text:(NSString * _Nonnull)text delay:(NSTimeInterval)delay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HTTPMockSequence (SWIFT_EXTENSION(PMHTTP))
@end


/**
  A token that can be used to unregister a mock from an \code
  HTTPMockManager
  \endcode.
*/
SWIFT_PROTOCOL("_TtP6PMHTTP13HTTPMockToken_")
@protocol HTTPMockToken
@end

@class NSCachedURLResponse;
@protocol NSURLProtocolClient;

SWIFT_CLASS("_TtC6PMHTTP19HTTPMockURLProtocol")
@interface HTTPMockURLProtocol : NSURLProtocol
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requestProperty;)
+ (NSString * _Nonnull)requestProperty;
+ (BOOL)canInitWithRequest:(NSURLRequest * _Nonnull)request;
+ (NSURLRequest * _Nonnull)canonicalRequestForRequest:(NSURLRequest * _Nonnull)request;
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request cachedResponse:(NSCachedURLResponse * _Nullable)cachedResponse client:(id <NSURLProtocolClient> _Nullable)client OBJC_DESIGNATED_INITIALIZER;
- (void)startLoading;
- (void)stopLoading;
@end


SWIFT_CLASS("_TtC6PMHTTP22NetworkActivityManager")
@interface NetworkActivityManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NetworkActivityManager * _Nonnull shared;)
+ (NetworkActivityManager * _Nonnull)shared;
@property (nonatomic, copy) void (^ _Nullable networkActivityHandler)(NSInteger);
/**
  Increments the global network activity counter.
*/
- (void)incrementCounter;
/**
  Decrements the global network activity counter.
*/
- (void)decrementCounter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  The results of an HTTP request.
*/
SWIFT_CLASS("_TtC6PMHTTP12PMHTTPResult")
@interface PMHTTPResult : NSObject <NSCopying>
/**
  \code
  true
  \endcode iff the task finished successfully.
*/
@property (nonatomic, readonly) BOOL isSuccess;
/**
  \code
  true
  \endcode iff the task failed with an error.
*/
@property (nonatomic, readonly) BOOL isError;
/**
  \code
  true
  \endcode iff the task was canceled before it finished.
*/
@property (nonatomic, readonly) BOOL isCanceled;
/**
  If the task finished successfully, returns the resulting value, if any.
  Otherwise, returns \code
  nil
  \endcode.
  note:
  A successful result may still have a \code
  nil
  \endcode value if the parse handler
  returns \code
  nil
  \endcode or if it’s a POST/PUT/PATCH/DELETE request and the response
  is 204 No Content.
*/
@property (nonatomic, readonly) id _Nullable value;
/**
  If the task finished successfully, or if it failed with an error
  during processing after receiving the response, returns the \code
  NSURLResponse
  \endcode.
  Otherwise, if the task failed with a networking error or was canceled,
  returns \code
  nil
  \endcode.
*/
@property (nonatomic, readonly, strong) NSURLResponse * _Nullable response;
/**
  If the task failed with an error, returns the \code
  NSError
  \endcode.
  Otherwise, returns \code
  nil
  \endcode.
  note:
  Canceled tasks are not considered to be in error and therefore
  return \code
  nil
  \endcode from both \code
  value
  \endcode and \code
  error
  \endcode.
*/
@property (nonatomic, readonly, strong) NSError * _Nullable error;
/**
  Creates and returns a new \code
  PMHTTPResult
  \endcode representing a successful result.
*/
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/**
  Creates and returns a new \code
  PMHTTPResult
  \endcode representing a failed task.
*/
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/**
  Creates and returns a new \code
  PMHTTPResult
  \endcode representing a canceled task.
*/
+ (PMHTTPResult * _Nonnull)canceledResult;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  The results of an HTTP request that returns an \code
  NSData
  \endcode.
*/
SWIFT_CLASS("_TtC6PMHTTP16PMHTTPDataResult")
@interface PMHTTPDataResult : PMHTTPResult
/**
  If the task finished successfully, returns the resulting \code
  Data
  \endcode, if any.
  Otherwise, returns \code
  nil
  \endcode.
  note:
  A successful result may still have a \code
  nil
  \endcode value if it’s a
  POST/PUT/PATCH/DELETE request and the response is 204 No Content.
  Successful GET/HEAD requests will never have a \code
  nil
  \endcode value.
  note:
  This property returns the same value that \code
  value
  \endcode does.
*/
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/**
  Creates and returns a new \code
  PMHTTPDataResult
  \endcode representing a successful result.
*/
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/**
  Creates and returns a new \code
  PMHTTPDataResult
  \endcode representing a failed task.
*/
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error response:(NSURLResponse * _Nullable)response OBJC_DESIGNATED_INITIALIZER;
/**
  Creates and returns a new \code
  PMHTTPDataResult
  \endcode representing a canceled task.
*/
+ (PMHTTPDataResult * _Nonnull)canceledResult;
- (nonnull instancetype)initWithValue:(id _Nullable)value response:(NSURLResponse * _Nonnull)response SWIFT_UNAVAILABLE;
@end


#pragma clang diagnostic pop
